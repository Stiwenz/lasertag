
lasertag_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002470  08002470  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002470  08002470  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002470  08002470  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08002484  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002484  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fcd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001530  00000000  00000000  00028001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  00029e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bed4  00000000  00000000  0002a650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bc2  00000000  00000000  00036524  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045a77  00000000  00000000  0003d0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00082b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f64  00000000  00000000  00082bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002428 	.word	0x08002428

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002428 	.word	0x08002428

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <interrupt>:
 */
#include "LASERWAR_receiver.h"

// void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

void interrupt(laserwar *rx, TIM_HandleTypeDef *htim) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	//extern TIM_HandleTypeDef htim3;
	rx->time = 0;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	22b0      	movs	r2, #176	; 0xb0
 800022e:	2100      	movs	r1, #0
 8000230:	5099      	str	r1, [r3, r2]
	if (htim->Instance == rx->fronts_capture) {
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2190      	movs	r1, #144	; 0x90
 800023a:	585b      	ldr	r3, [r3, r1]
 800023c:	429a      	cmp	r2, r3
 800023e:	d160      	bne.n	8000302 <interrupt+0xe2>
		if (htim->Channel == rx->tim_ch_fall_active) //FALLING
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	7f1b      	ldrb	r3, [r3, #28]
 8000244:	0019      	movs	r1, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	22a0      	movs	r2, #160	; 0xa0
 800024a:	589b      	ldr	r3, [r3, r2]
 800024c:	4299      	cmp	r1, r3
 800024e:	d105      	bne.n	800025c <interrupt+0x3c>
				{
			rx->fronts_capture->CNT = 0; // обнуление счётчика
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2290      	movs	r2, #144	; 0x90
 8000254:	589b      	ldr	r3, [r3, r2]
 8000256:	2200      	movs	r2, #0
 8000258:	625a      	str	r2, [r3, #36]	; 0x24
					 asm("NOP");

			}
		}
	}
}
 800025a:	e052      	b.n	8000302 <interrupt+0xe2>
		} else if (htim->Channel == rx->tim_ch_rise_active) // RISING
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	7f1b      	ldrb	r3, [r3, #28]
 8000260:	0019      	movs	r1, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	22a8      	movs	r2, #168	; 0xa8
 8000266:	589b      	ldr	r3, [r3, r2]
 8000268:	4299      	cmp	r1, r3
 800026a:	d14a      	bne.n	8000302 <interrupt+0xe2>
			rx->time = rx->fronts_capture->CNT;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2290      	movs	r2, #144	; 0x90
 8000270:	589b      	ldr	r3, [r3, r2]
 8000272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	21b0      	movs	r1, #176	; 0xb0
 8000278:	505a      	str	r2, [r3, r1]
			if (rx->time >= 2300 && rx->time <= 3000)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	22b0      	movs	r2, #176	; 0xb0
 800027e:	589b      	ldr	r3, [r3, r2]
 8000280:	4a22      	ldr	r2, [pc, #136]	; (800030c <interrupt+0xec>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d908      	bls.n	8000298 <interrupt+0x78>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	22b0      	movs	r2, #176	; 0xb0
 800028a:	589b      	ldr	r3, [r3, r2]
 800028c:	4a20      	ldr	r2, [pc, #128]	; (8000310 <interrupt+0xf0>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d802      	bhi.n	8000298 <interrupt+0x78>
				rx->start_reading = 1;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2201      	movs	r2, #1
 8000296:	729a      	strb	r2, [r3, #10]
			if ((rx->start_reading)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	7a9b      	ldrb	r3, [r3, #10]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d030      	beq.n	8000302 <interrupt+0xe2>
					&& ((rx->time >= 400 && rx->time <= 700)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	22b0      	movs	r2, #176	; 0xb0
 80002a4:	589a      	ldr	r2, [r3, r2]
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	33ff      	adds	r3, #255	; 0xff
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d906      	bls.n	80002bc <interrupt+0x9c>
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	22b0      	movs	r2, #176	; 0xb0
 80002b2:	589a      	ldr	r2, [r3, r2]
 80002b4:	23af      	movs	r3, #175	; 0xaf
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d90b      	bls.n	80002d4 <interrupt+0xb4>
							|| (rx->time >= 1000 && rx->time <= 1300))) {
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	22b0      	movs	r2, #176	; 0xb0
 80002c0:	589b      	ldr	r3, [r3, r2]
 80002c2:	4a14      	ldr	r2, [pc, #80]	; (8000314 <interrupt+0xf4>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d91c      	bls.n	8000302 <interrupt+0xe2>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	22b0      	movs	r2, #176	; 0xb0
 80002cc:	589b      	ldr	r3, [r3, r2]
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <interrupt+0xf8>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d816      	bhi.n	8000302 <interrupt+0xe2>
				rx->BUFF[rx->n] = rx->time;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	7a1b      	ldrb	r3, [r3, #8]
 80002d8:	0018      	movs	r0, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	22b0      	movs	r2, #176	; 0xb0
 80002de:	589a      	ldr	r2, [r3, r2]
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	1c83      	adds	r3, r0, #2
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18cb      	adds	r3, r1, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
				rx->n++;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7a1b      	ldrb	r3, [r3, #8]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	721a      	strb	r2, [r3, #8]
				if(rx->n == 20)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	7a1b      	ldrb	r3, [r3, #8]
 80002fc:	2b14      	cmp	r3, #20
 80002fe:	d100      	bne.n	8000302 <interrupt+0xe2>
					 asm("NOP");
 8000300:	46c0      	nop			; (mov r8, r8)
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	000008fb 	.word	0x000008fb
 8000310:	00000bb8 	.word	0x00000bb8
 8000314:	000003e7 	.word	0x000003e7
 8000318:	00000514 	.word	0x00000514

0800031c <read_hex>:

uint32_t read_hex(laserwar *rx) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	uint32_t hex = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
	uint8_t n = 0;
 8000328:	230b      	movs	r3, #11
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = rx->n-1; i <= rx->n-1; i--) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7a1a      	ldrb	r2, [r3, #8]
 8000334:	230a      	movs	r3, #10
 8000336:	18fb      	adds	r3, r7, r3
 8000338:	3a01      	subs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	e02d      	b.n	800039a <read_hex+0x7e>
		if (rx->BUFF[i] >= 1000 && rx->BUFF[i] <= 1300) {
 800033e:	230a      	movs	r3, #10
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	3302      	adds	r3, #2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	18d3      	adds	r3, r2, r3
 800034c:	3304      	adds	r3, #4
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <read_hex+0x98>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d915      	bls.n	8000382 <read_hex+0x66>
 8000356:	230a      	movs	r3, #10
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	3302      	adds	r3, #2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	18d3      	adds	r3, r2, r3
 8000364:	3304      	adds	r3, #4
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <read_hex+0x9c>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d809      	bhi.n	8000382 <read_hex+0x66>

			hex |= 1 << n; //set the bit in the variable
 800036e:	230b      	movs	r3, #11
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2201      	movs	r2, #1
 8000376:	409a      	lsls	r2, r3
 8000378:	0013      	movs	r3, r2
 800037a:	001a      	movs	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	4313      	orrs	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]
		}
		n++;
 8000382:	210b      	movs	r1, #11
 8000384:	187b      	adds	r3, r7, r1
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	187b      	adds	r3, r7, r1
 800038a:	3201      	adds	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = rx->n-1; i <= rx->n-1; i--) {
 800038e:	210a      	movs	r1, #10
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	230a      	movs	r3, #10
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781a      	ldrb	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	7a1b      	ldrb	r3, [r3, #8]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	429a      	cmp	r2, r3
 80003a8:	ddc9      	ble.n	800033e <read_hex+0x22>
	}
	return hex;
 80003aa:	68fb      	ldr	r3, [r7, #12]

}
 80003ac:	0018      	movs	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b004      	add	sp, #16
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	000003e7 	.word	0x000003e7
 80003b8:	00000514 	.word	0x00000514

080003bc <Laser_Init>:

void Laser_Init(laserwar *rx, TIM_HandleTypeDef *_tim_interrupt,
		TIM_HandleTypeDef *_time_counter, uint32_t _tim_ch_fall,
		uint32_t _tim_ch_rise, TIM_TypeDef *_fronts_capture, TIM_TypeDef *_counter_intr){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
 80003c8:	603b      	str	r3, [r7, #0]
	rx->time_counter = _time_counter;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2198      	movs	r1, #152	; 0x98
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	505a      	str	r2, [r3, r1]
	rx->tim_interrupt = _tim_interrupt;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	218c      	movs	r1, #140	; 0x8c
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	505a      	str	r2, [r3, r1]
	rx->tim_ch_fall = _tim_ch_fall;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	219c      	movs	r1, #156	; 0x9c
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	505a      	str	r2, [r3, r1]
	rx->tim_ch_rise = _tim_ch_rise;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	21a4      	movs	r1, #164	; 0xa4
 80003e6:	69ba      	ldr	r2, [r7, #24]
 80003e8:	505a      	str	r2, [r3, r1]
	rx->fronts_capture = _fronts_capture;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2190      	movs	r1, #144	; 0x90
 80003ee:	69fa      	ldr	r2, [r7, #28]
 80003f0:	505a      	str	r2, [r3, r1]
	rx->counter_intr = _counter_intr;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2194      	movs	r1, #148	; 0x94
 80003f6:	6a3a      	ldr	r2, [r7, #32]
 80003f8:	505a      	str	r2, [r3, r1]
	HAL_TIM_IC_Start_IT(rx->tim_interrupt, rx->tim_ch_fall);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	228c      	movs	r2, #140	; 0x8c
 80003fe:	5898      	ldr	r0, [r3, r2]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	229c      	movs	r2, #156	; 0x9c
 8000404:	589b      	ldr	r3, [r3, r2]
 8000406:	0019      	movs	r1, r3
 8000408:	f001 fa60 	bl	80018cc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(rx->tim_interrupt, rx->tim_ch_rise);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	228c      	movs	r2, #140	; 0x8c
 8000410:	5898      	ldr	r0, [r3, r2]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	22a4      	movs	r2, #164	; 0xa4
 8000416:	589b      	ldr	r3, [r3, r2]
 8000418:	0019      	movs	r1, r3
 800041a:	f001 fa57 	bl	80018cc <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(rx->time_counter);
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2298      	movs	r2, #152	; 0x98
 8000422:	589b      	ldr	r3, [r3, r2]
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fa03 	bl	8001830 <HAL_TIM_Base_Start_IT>
	rx->tim_ch_rise_active = channel_init(_tim_ch_rise);
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	0018      	movs	r0, r3
 800042e:	f000 f83f 	bl	80004b0 <channel_init>
 8000432:	0003      	movs	r3, r0
 8000434:	0019      	movs	r1, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	22a8      	movs	r2, #168	; 0xa8
 800043a:	5099      	str	r1, [r3, r2]
	rx->tim_ch_fall_active = channel_init(_tim_ch_fall);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f836 	bl	80004b0 <channel_init>
 8000444:	0003      	movs	r3, r0
 8000446:	0019      	movs	r1, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	22a0      	movs	r2, #160	; 0xa0
 800044c:	5099      	str	r1, [r3, r2]
	}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <pack_ended>:


void pack_ended (laserwar *rx, TIM_HandleTypeDef *htim){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
	if (htim->Instance == rx->counter_intr){
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2194      	movs	r1, #148	; 0x94
 800046a:	585b      	ldr	r3, [r3, r1]
 800046c:	429a      	cmp	r2, r3
 800046e:	d119      	bne.n	80004a4 <pack_ended+0x4c>
	uint32_t timer_value = rx->fronts_capture->CNT;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2290      	movs	r2, #144	; 0x90
 8000474:	589b      	ldr	r3, [r3, r2]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	60fb      	str	r3, [r7, #12]
	if (timer_value >= 3000 && rx->start_reading) {
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <pack_ended+0x54>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d910      	bls.n	80004a4 <pack_ended+0x4c>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	7a9b      	ldrb	r3, [r3, #10]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d00c      	beq.n	80004a4 <pack_ended+0x4c>
						rx->value = read_hex(rx);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ff45 	bl	800031c <read_hex>
 8000492:	0002      	movs	r2, r0
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	601a      	str	r2, [r3, #0]
						rx->n = 0;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	721a      	strb	r2, [r3, #8]
						rx->start_reading = 0;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	729a      	strb	r2, [r3, #10]
					}
}
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b004      	add	sp, #16
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	00000bb7 	.word	0x00000bb7

080004b0 <channel_init>:
uint8_t channel_init(uint32_t tim_channel) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	switch (tim_channel) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d00a      	beq.n	80004d4 <channel_init+0x24>
 80004be:	d802      	bhi.n	80004c6 <channel_init+0x16>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d005      	beq.n	80004d0 <channel_init+0x20>
 80004c4:	e00c      	b.n	80004e0 <channel_init+0x30>
 80004c6:	2b08      	cmp	r3, #8
 80004c8:	d006      	beq.n	80004d8 <channel_init+0x28>
 80004ca:	2b0c      	cmp	r3, #12
 80004cc:	d006      	beq.n	80004dc <channel_init+0x2c>
 80004ce:	e007      	b.n	80004e0 <channel_init+0x30>
	case TIM_CHANNEL_1:
		return HAL_TIM_ACTIVE_CHANNEL_1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e006      	b.n	80004e2 <channel_init+0x32>
		break;
	case TIM_CHANNEL_2:
		return HAL_TIM_ACTIVE_CHANNEL_2;
 80004d4:	2302      	movs	r3, #2
 80004d6:	e004      	b.n	80004e2 <channel_init+0x32>
		break;
	case TIM_CHANNEL_3:
		return HAL_TIM_ACTIVE_CHANNEL_3;
 80004d8:	2304      	movs	r3, #4
 80004da:	e002      	b.n	80004e2 <channel_init+0x32>
		break;
	case TIM_CHANNEL_4:
		return HAL_TIM_ACTIVE_CHANNEL_4;
 80004dc:	2308      	movs	r3, #8
 80004de:	e000      	b.n	80004e2 <channel_init+0x32>
		break;
	default: return 0;
 80004e0:	2300      	movs	r3, #0
	}
}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fa71 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f821 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f92f 	bl	800075c <MX_GPIO_Init>
  MX_TIM3_Init();
 80004fe:	f000 f8bf 	bl	8000680 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000502:	f000 f865 	bl	80005d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Laser_Init(&irRX, &htim3, &htim1 ,TIM_CHANNEL_1, TIM_CHANNEL_2, TIM3, TIM1);
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x3c>)
 8000508:	4908      	ldr	r1, [pc, #32]	; (800052c <main+0x40>)
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <main+0x44>)
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x48>)
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x4c>)
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2304      	movs	r3, #4
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	f7ff ff4f 	bl	80003bc <Laser_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
uint32_t value = irRX.value;
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <main+0x44>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	607b      	str	r3, [r7, #4]
  {
 8000524:	e7fb      	b.n	800051e <main+0x32>
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000068 	.word	0x20000068
 800052c:	20000028 	.word	0x20000028
 8000530:	200000a8 	.word	0x200000a8
 8000534:	40012c00 	.word	0x40012c00
 8000538:	40000400 	.word	0x40000400

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b091      	sub	sp, #68	; 0x44
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	2410      	movs	r4, #16
 8000544:	193b      	adds	r3, r7, r4
 8000546:	0018      	movs	r0, r3
 8000548:	2330      	movs	r3, #48	; 0x30
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f001 ff63 	bl	8002418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	003b      	movs	r3, r7
 8000554:	0018      	movs	r0, r3
 8000556:	2310      	movs	r3, #16
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f001 ff5c 	bl	8002418 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	0021      	movs	r1, r4
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2202      	movs	r2, #2
 8000566:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2201      	movs	r2, #1
 800056c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2210      	movs	r2, #16
 8000572:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2202      	movs	r2, #2
 8000578:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0312      	lsls	r2, r2, #12
 8000586:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	187b      	adds	r3, r7, r1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fcd3 	bl	8000f3c <HAL_RCC_OscConfig>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800059a:	f000 f917 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	003b      	movs	r3, r7
 80005a0:	2207      	movs	r2, #7
 80005a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2202      	movs	r2, #2
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	003b      	movs	r3, r7
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 ffda 	bl	8001574 <HAL_RCC_ClockConfig>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c4:	f000 f902 	bl	80007cc <Error_Handler>
  }
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b011      	add	sp, #68	; 0x44
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	2308      	movs	r3, #8
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2310      	movs	r3, #16
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f001 ff19 	bl	8002418 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f001 ff12 	bl	8002418 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_TIM1_Init+0xa8>)
 80005f6:	4a21      	ldr	r2, [pc, #132]	; (800067c <MX_TIM1_Init+0xac>)
 80005f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_TIM1_Init+0xa8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_TIM1_Init+0xa8>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_TIM1_Init+0xa8>)
 8000608:	22fa      	movs	r2, #250	; 0xfa
 800060a:	0192      	lsls	r2, r2, #6
 800060c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_TIM1_Init+0xa8>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_TIM1_Init+0xa8>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_TIM1_Init+0xa8>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_TIM1_Init+0xa8>)
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f8d8 	bl	80017d8 <HAL_TIM_Base_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f8ce 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000630:	2108      	movs	r1, #8
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0152      	lsls	r2, r2, #5
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800063a:	187a      	adds	r2, r7, r1
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_TIM1_Init+0xa8>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fb49 	bl	8001cd8 <HAL_TIM_ConfigClockSource>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800064a:	f000 f8bf 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064e:	003b      	movs	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	003b      	movs	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800065a:	003a      	movs	r2, r7
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_TIM1_Init+0xa8>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fe53 	bl	800230c <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800066a:	f000 f8af 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b006      	add	sp, #24
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000068 	.word	0x20000068
 800067c:	40012c00 	.word	0x40012c00

08000680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	2310      	movs	r3, #16
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	2308      	movs	r3, #8
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f001 fec1 	bl	8002418 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000696:	003b      	movs	r3, r7
 8000698:	0018      	movs	r0, r3
 800069a:	2310      	movs	r3, #16
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f001 feba 	bl	8002418 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006a6:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <MX_TIM3_Init+0xd4>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <MX_TIM3_Init+0xd8>)
 80006ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f8d2 	bl	8001874 <HAL_TIM_IC_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006d4:	f000 f87a 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2110      	movs	r1, #16
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e6:	187a      	adds	r2, r7, r1
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_TIM3_Init+0xd0>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fe0d 	bl	800230c <HAL_TIMEx_MasterConfigSynchronization>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80006f6:	f000 f869 	bl	80007cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2202      	movs	r2, #2
 80006fe:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000700:	003b      	movs	r3, r7
 8000702:	2201      	movs	r2, #1
 8000704:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000706:	003b      	movs	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800070c:	003b      	movs	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000712:	0039      	movs	r1, r7
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_TIM3_Init+0xd0>)
 8000716:	2200      	movs	r2, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fa3f 	bl	8001b9c <HAL_TIM_IC_ConfigChannel>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000722:	f000 f853 	bl	80007cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800072c:	003b      	movs	r3, r7
 800072e:	2202      	movs	r2, #2
 8000730:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000732:	0039      	movs	r1, r7
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_TIM3_Init+0xd0>)
 8000736:	2204      	movs	r2, #4
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fa2f 	bl	8001b9c <HAL_TIM_IC_ConfigChannel>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8000742:	f000 f843 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b006      	add	sp, #24
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	20000028 	.word	0x20000028
 8000754:	40000400 	.word	0x40000400
 8000758:	0000fde8 	.word	0x0000fde8

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0289      	lsls	r1, r1, #10
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	029b      	lsls	r3, r3, #10
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM3){
//uint8_t a = 0;
	interrupt(&irRX,htim);
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fd40 	bl	8000220 <interrupt>
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a8 	.word	0x200000a8

080007ac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
pack_ended(&irRX, htim);
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fe4c 	bl	8000458 <pack_ended>

}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000a8 	.word	0x200000a8

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x44>)
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x44>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	619a      	str	r2, [r3, #24]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x44>)
 80007f8:	69da      	ldr	r2, [r3, #28]
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x44>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0549      	lsls	r1, r1, #21
 8000800:	430a      	orrs	r2, r1
 8000802:	61da      	str	r2, [r3, #28]
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_MspInit+0x44>)
 8000806:	69da      	ldr	r2, [r3, #28]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	055b      	lsls	r3, r3, #21
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_TIM_Base_MspInit+0x48>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d115      	bne.n	800085e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_TIM_Base_MspInit+0x4c>)
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_TIM_Base_MspInit+0x4c>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0109      	lsls	r1, r1, #4
 800083c:	430a      	orrs	r2, r1
 800083e:	619a      	str	r2, [r3, #24]
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_TIM_Base_MspInit+0x4c>)
 8000842:	699a      	ldr	r2, [r3, #24]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	200d      	movs	r0, #13
 8000854:	f000 f9d0 	bl	8000bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000858:	200d      	movs	r0, #13
 800085a:	f000 f9e2 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	40012c00 	.word	0x40012c00
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2314      	movs	r3, #20
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f001 fdc8 	bl	8002418 <memset>
  if(htim_ic->Instance==TIM3)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a1f      	ldr	r2, [pc, #124]	; (800090c <HAL_TIM_IC_MspInit+0x9c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d138      	bne.n	8000904 <HAL_TIM_IC_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_TIM_IC_MspInit+0xa0>)
 8000894:	69da      	ldr	r2, [r3, #28]
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_TIM_IC_MspInit+0xa0>)
 8000898:	2102      	movs	r1, #2
 800089a:	430a      	orrs	r2, r1
 800089c:	61da      	str	r2, [r3, #28]
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_TIM_IC_MspInit+0xa0>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	2202      	movs	r2, #2
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_TIM_IC_MspInit+0xa0>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_TIM_IC_MspInit+0xa0>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_TIM_IC_MspInit+0xa0>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c6:	2114      	movs	r1, #20
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2240      	movs	r2, #64	; 0x40
 80008cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2201      	movs	r2, #1
 80008e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	187a      	adds	r2, r7, r1
 80008e8:	2390      	movs	r3, #144	; 0x90
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 f9b4 	bl	8000c5c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2010      	movs	r0, #16
 80008fa:	f000 f97d 	bl	8000bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008fe:	2010      	movs	r0, #16
 8000900:	f000 f98f 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b00a      	add	sp, #40	; 0x28
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40000400 	.word	0x40000400
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f894 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800094e:	0018      	movs	r0, r3
 8000950:	f001 f80e 	bl	8001970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	20000068 	.word	0x20000068

08000960 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <TIM3_IRQHandler+0x14>)
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f802 	bl	8001970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000028 	.word	0x20000028

08000978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ae:	f7ff ffe3 	bl	8000978 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009b2:	f001 fd0d 	bl	80023d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b6:	f7ff fd99 	bl	80004ec <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   r0, =_estack
 80009bc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08002478 	.word	0x08002478
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	20000160 	.word	0x20000160

080009d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>
	...

080009d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_Init+0x24>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_Init+0x24>)
 80009e2:	2110      	movs	r1, #16
 80009e4:	430a      	orrs	r2, r1
 80009e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 f809 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ee:	f7ff fef3 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a0a:	681c      	ldr	r4, [r3, #0]
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_InitTick+0x60>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	0019      	movs	r1, r3
 8000a12:	23fa      	movs	r3, #250	; 0xfa
 8000a14:	0098      	lsls	r0, r3, #2
 8000a16:	f7ff fb77 	bl	8000108 <__udivsi3>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0020      	movs	r0, r4
 8000a20:	f7ff fb72 	bl	8000108 <__udivsi3>
 8000a24:	0003      	movs	r3, r0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 f90b 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e00f      	b.n	8000a54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d80b      	bhi.n	8000a52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425b      	negs	r3, r3
 8000a40:	2200      	movs	r2, #0
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f8d8 	bl	8000bf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_InitTick+0x64>)
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b003      	add	sp, #12
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	001a      	movs	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x20>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	18d2      	adds	r2, r2, r3
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_IncTick+0x20>)
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000015c 	.word	0x2000015c

08000a8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <HAL_GetTick+0x10>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	2000015c 	.word	0x2000015c

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab2:	d809      	bhi.n	8000ac8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	231f      	movs	r3, #31
 8000abc:	401a      	ands	r2, r3
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_EnableIRQ+0x30>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
  }
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae8:	d828      	bhi.n	8000b3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aea:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <__NVIC_SetPriority+0xd4>)
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	33c0      	adds	r3, #192	; 0xc0
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	589b      	ldr	r3, [r3, r2]
 8000afa:	1dfa      	adds	r2, r7, #7
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	0011      	movs	r1, r2
 8000b00:	2203      	movs	r2, #3
 8000b02:	400a      	ands	r2, r1
 8000b04:	00d2      	lsls	r2, r2, #3
 8000b06:	21ff      	movs	r1, #255	; 0xff
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	43d2      	mvns	r2, r2
 8000b0e:	401a      	ands	r2, r3
 8000b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	401a      	ands	r2, r3
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	2303      	movs	r3, #3
 8000b22:	4003      	ands	r3, r0
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <__NVIC_SetPriority+0xd4>)
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	430a      	orrs	r2, r1
 8000b34:	33c0      	adds	r3, #192	; 0xc0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3a:	e031      	b.n	8000ba0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <__NVIC_SetPriority+0xd8>)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0019      	movs	r1, r3
 8000b44:	230f      	movs	r3, #15
 8000b46:	400b      	ands	r3, r1
 8000b48:	3b08      	subs	r3, #8
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	3306      	adds	r3, #6
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	3304      	adds	r3, #4
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1dfa      	adds	r2, r7, #7
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	400a      	ands	r2, r1
 8000b60:	00d2      	lsls	r2, r2, #3
 8000b62:	21ff      	movs	r1, #255	; 0xff
 8000b64:	4091      	lsls	r1, r2
 8000b66:	000a      	movs	r2, r1
 8000b68:	43d2      	mvns	r2, r2
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	22ff      	movs	r2, #255	; 0xff
 8000b74:	401a      	ands	r2, r3
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	4003      	ands	r3, r0
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <__NVIC_SetPriority+0xd8>)
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	001c      	movs	r4, r3
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	4023      	ands	r3, r4
 8000b90:	3b08      	subs	r3, #8
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	430a      	orrs	r2, r1
 8000b96:	3306      	adds	r3, #6
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	18c3      	adds	r3, r0, r3
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <SysTick_Config+0x40>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d901      	bls.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e010      	b.n	8000be8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <SysTick_Config+0x44>)
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	3a01      	subs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ff7d 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SysTick_Config+0x44>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x44>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	00ffffff 	.word	0x00ffffff
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	210f      	movs	r1, #15
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	1c02      	adds	r2, r0, #0
 8000c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b004      	add	sp, #16
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	0002      	movs	r2, r0
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff33 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ffaf 	bl	8000bb0 <SysTick_Config>
 8000c52:	0003      	movs	r3, r0
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e14f      	b.n	8000f0c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <HAL_GPIO_Init+0x28>
 8000c82:	e140      	b.n	8000f06 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x38>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b12      	cmp	r3, #18
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	58d3      	ldr	r3, [r2, r3]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d00b      	beq.n	8000d30 <HAL_GPIO_Init+0xd4>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d24:	2b11      	cmp	r3, #17
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b12      	cmp	r3, #18
 8000d2e:	d130      	bne.n	8000d92 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	055b      	lsls	r3, r3, #21
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_GPIO_Init+0x174>
 8000dce:	e09a      	b.n	8000f06 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	619a      	str	r2, [r3, #24]
 8000ddc:	4b51      	ldr	r3, [pc, #324]	; (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4013      	ands	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de8:	4a4f      	ldr	r2, [pc, #316]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	589b      	ldr	r3, [r3, r2]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	409a      	lsls	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	2390      	movs	r3, #144	; 0x90
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x1e2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x1de>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <HAL_GPIO_Init+0x2d4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x1da>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a42      	ldr	r2, [pc, #264]	; (8000f34 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x1e4>
 8000e32:	2305      	movs	r3, #5
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x1e4>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x1e4>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x1e4>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	2103      	movs	r1, #3
 8000e44:	400a      	ands	r2, r1
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e50:	4935      	ldr	r1, [pc, #212]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	025b      	lsls	r3, r3, #9
 8000e76:	4013      	ands	r3, r2
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43da      	mvns	r2, r3
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	035b      	lsls	r3, r3, #13
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	039b      	lsls	r3, r3, #14
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	40da      	lsrs	r2, r3
 8000f14:	1e13      	subs	r3, r2, #0
 8000f16:	d000      	beq.n	8000f1a <HAL_GPIO_Init+0x2be>
 8000f18:	e6a8      	b.n	8000c6c <HAL_GPIO_Init+0x10>
  } 
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b006      	add	sp, #24
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	48000800 	.word	0x48000800
 8000f34:	48000c00 	.word	0x48000c00
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e303      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x1e>
 8000f58:	e08d      	b.n	8001076 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f5a:	4bc4      	ldr	r3, [pc, #784]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	220c      	movs	r2, #12
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d00e      	beq.n	8000f84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f66:	4bc1      	ldr	r3, [pc, #772]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d116      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x64>
 8000f72:	4bbe      	ldr	r3, [pc, #760]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	025b      	lsls	r3, r3, #9
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d10d      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4bb9      	ldr	r3, [pc, #740]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d100      	bne.n	8000f92 <HAL_RCC_OscConfig+0x56>
 8000f90:	e070      	b.n	8001074 <HAL_RCC_OscConfig+0x138>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d000      	beq.n	8000f9c <HAL_RCC_OscConfig+0x60>
 8000f9a:	e06b      	b.n	8001074 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e2da      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d107      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x7c>
 8000fa8:	4bb0      	ldr	r3, [pc, #704]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4baf      	ldr	r3, [pc, #700]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0249      	lsls	r1, r1, #9
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e02f      	b.n	8001018 <HAL_RCC_OscConfig+0xdc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0x9e>
 8000fc0:	4baa      	ldr	r3, [pc, #680]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4ba9      	ldr	r3, [pc, #676]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fc6:	49aa      	ldr	r1, [pc, #680]	; (8001270 <HAL_RCC_OscConfig+0x334>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	4ba7      	ldr	r3, [pc, #668]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4ba6      	ldr	r3, [pc, #664]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fd2:	49a8      	ldr	r1, [pc, #672]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e01e      	b.n	8001018 <HAL_RCC_OscConfig+0xdc>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d10e      	bne.n	8001000 <HAL_RCC_OscConfig+0xc4>
 8000fe2:	4ba2      	ldr	r3, [pc, #648]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4ba1      	ldr	r3, [pc, #644]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	02c9      	lsls	r1, r1, #11
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	4b9e      	ldr	r3, [pc, #632]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b9d      	ldr	r3, [pc, #628]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	0249      	lsls	r1, r1, #9
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e00b      	b.n	8001018 <HAL_RCC_OscConfig+0xdc>
 8001000:	4b9a      	ldr	r3, [pc, #616]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b99      	ldr	r3, [pc, #612]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001006:	499a      	ldr	r1, [pc, #616]	; (8001270 <HAL_RCC_OscConfig+0x334>)
 8001008:	400a      	ands	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	4b97      	ldr	r3, [pc, #604]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b96      	ldr	r3, [pc, #600]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001012:	4998      	ldr	r1, [pc, #608]	; (8001274 <HAL_RCC_OscConfig+0x338>)
 8001014:	400a      	ands	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d014      	beq.n	800104a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fd34 	bl	8000a8c <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102a:	f7ff fd2f 	bl	8000a8c <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	; 0x64
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e28c      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103c:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0xee>
 8001048:	e015      	b.n	8001076 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fd1f 	bl	8000a8c <HAL_GetTick>
 800104e:	0003      	movs	r3, r0
 8001050:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fd1a 	bl	8000a8c <HAL_GetTick>
 8001058:	0002      	movs	r2, r0
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e277      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	029b      	lsls	r3, r3, #10
 800106e:	4013      	ands	r3, r2
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x118>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d100      	bne.n	8001082 <HAL_RCC_OscConfig+0x146>
 8001080:	e069      	b.n	8001156 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001082:	4b7a      	ldr	r3, [pc, #488]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	220c      	movs	r2, #12
 8001088:	4013      	ands	r3, r2
 800108a:	d00b      	beq.n	80010a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800108c:	4b77      	ldr	r3, [pc, #476]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	220c      	movs	r2, #12
 8001092:	4013      	ands	r3, r2
 8001094:	2b08      	cmp	r3, #8
 8001096:	d11c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x196>
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	025b      	lsls	r3, r3, #9
 80010a0:	4013      	ands	r3, r2
 80010a2:	d116      	bne.n	80010d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x17e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e24d      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	22f8      	movs	r2, #248	; 0xf8
 80010c0:	4393      	bics	r3, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	00da      	lsls	r2, r3, #3
 80010ca:	4b68      	ldr	r3, [pc, #416]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d0:	e041      	b.n	8001156 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d024      	beq.n	8001124 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010da:	4b64      	ldr	r3, [pc, #400]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fcd1 	bl	8000a8c <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff fccc 	bl	8000a8c <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e229      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	4b5a      	ldr	r3, [pc, #360]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2202      	movs	r2, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d0f1      	beq.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b57      	ldr	r3, [pc, #348]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	22f8      	movs	r2, #248	; 0xf8
 8001112:	4393      	bics	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	00da      	lsls	r2, r3, #3
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e018      	b.n	8001156 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001124:	4b51      	ldr	r3, [pc, #324]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800112a:	2101      	movs	r1, #1
 800112c:	438a      	bics	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fcac 	bl	8000a8c <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fca7 	bl	8000a8c <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e204      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114c:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d1f1      	bne.n	800113a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2208      	movs	r2, #8
 800115c:	4013      	ands	r3, r2
 800115e:	d036      	beq.n	80011ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d019      	beq.n	800119c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fc8a 	bl	8000a8c <HAL_GetTick>
 8001178:	0003      	movs	r3, r0
 800117a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117e:	f7ff fc85 	bl	8000a8c <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e1e2      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d0f1      	beq.n	800117e <HAL_RCC_OscConfig+0x242>
 800119a:	e018      	b.n	80011ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800119e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	438a      	bics	r2, r1
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc70 	bl	8000a8c <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc6b 	bl	8000a8c <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1c8      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f1      	bne.n	80011b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d100      	bne.n	80011da <HAL_RCC_OscConfig+0x29e>
 80011d8:	e0b6      	b.n	8001348 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	231f      	movs	r3, #31
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80011e4:	69da      	ldr	r2, [r3, #28]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	055b      	lsls	r3, r3, #21
 80011ea:	4013      	ands	r3, r2
 80011ec:	d111      	bne.n	8001212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0549      	lsls	r1, r1, #21
 80011f8:	430a      	orrs	r2, r1
 80011fa:	61da      	str	r2, [r3, #28]
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_RCC_OscConfig+0x330>)
 80011fe:	69da      	ldr	r2, [r3, #28]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800120a:	231f      	movs	r3, #31
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_RCC_OscConfig+0x33c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4013      	ands	r3, r2
 800121c:	d11a      	bne.n	8001254 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_RCC_OscConfig+0x33c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_RCC_OscConfig+0x33c>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0049      	lsls	r1, r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122c:	f7ff fc2e 	bl	8000a8c <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fc29 	bl	8000a8c <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	; 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e186      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_OscConfig+0x33c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4013      	ands	r3, r2
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d10f      	bne.n	800127c <HAL_RCC_OscConfig+0x340>
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_RCC_OscConfig+0x330>)
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_RCC_OscConfig+0x330>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	621a      	str	r2, [r3, #32]
 8001268:	e036      	b.n	80012d8 <HAL_RCC_OscConfig+0x39c>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	40021000 	.word	0x40021000
 8001270:	fffeffff 	.word	0xfffeffff
 8001274:	fffbffff 	.word	0xfffbffff
 8001278:	40007000 	.word	0x40007000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0x362>
 8001284:	4bb6      	ldr	r3, [pc, #728]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	4bb5      	ldr	r3, [pc, #724]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800128a:	2101      	movs	r1, #1
 800128c:	438a      	bics	r2, r1
 800128e:	621a      	str	r2, [r3, #32]
 8001290:	4bb3      	ldr	r3, [pc, #716]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4bb2      	ldr	r3, [pc, #712]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001296:	2104      	movs	r1, #4
 8001298:	438a      	bics	r2, r1
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	e01c      	b.n	80012d8 <HAL_RCC_OscConfig+0x39c>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x384>
 80012a6:	4bae      	ldr	r3, [pc, #696]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012a8:	6a1a      	ldr	r2, [r3, #32]
 80012aa:	4bad      	ldr	r3, [pc, #692]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	430a      	orrs	r2, r1
 80012b0:	621a      	str	r2, [r3, #32]
 80012b2:	4bab      	ldr	r3, [pc, #684]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	4baa      	ldr	r3, [pc, #680]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	430a      	orrs	r2, r1
 80012bc:	621a      	str	r2, [r3, #32]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0x39c>
 80012c0:	4ba7      	ldr	r3, [pc, #668]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	4ba6      	ldr	r3, [pc, #664]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	438a      	bics	r2, r1
 80012ca:	621a      	str	r2, [r3, #32]
 80012cc:	4ba4      	ldr	r3, [pc, #656]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012ce:	6a1a      	ldr	r2, [r3, #32]
 80012d0:	4ba3      	ldr	r3, [pc, #652]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80012d2:	2104      	movs	r1, #4
 80012d4:	438a      	bics	r2, r1
 80012d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d014      	beq.n	800130a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbd4 	bl	8000a8c <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	e009      	b.n	80012fe <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fbcf 	bl	8000a8c <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	4a9b      	ldr	r2, [pc, #620]	; (8001564 <HAL_RCC_OscConfig+0x628>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e12b      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fe:	4b98      	ldr	r3, [pc, #608]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x3ae>
 8001308:	e013      	b.n	8001332 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fbbf 	bl	8000a8c <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001312:	e009      	b.n	8001328 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fbba 	bl	8000a8c <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	4a91      	ldr	r2, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x628>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e116      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001328:	4b8d      	ldr	r3, [pc, #564]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001332:	231f      	movs	r3, #31
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800133e:	69da      	ldr	r2, [r3, #28]
 8001340:	4b87      	ldr	r3, [pc, #540]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001342:	4989      	ldr	r1, [pc, #548]	; (8001568 <HAL_RCC_OscConfig+0x62c>)
 8001344:	400a      	ands	r2, r1
 8001346:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2210      	movs	r2, #16
 800134e:	4013      	ands	r3, r2
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d12a      	bne.n	80013b0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800135c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135e:	4b80      	ldr	r3, [pc, #512]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001360:	2104      	movs	r1, #4
 8001362:	430a      	orrs	r2, r1
 8001364:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001366:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fb8b 	bl	8000a8c <HAL_GetTick>
 8001376:	0003      	movs	r3, r0
 8001378:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800137c:	f7ff fb86 	bl	8000a8c <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0e3      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d0f1      	beq.n	800137c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001398:	4b71      	ldr	r3, [pc, #452]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139c:	22f8      	movs	r2, #248	; 0xf8
 800139e:	4393      	bics	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	00da      	lsls	r2, r3, #3
 80013a8:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
 80013ae:	e034      	b.n	800141a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	3305      	adds	r3, #5
 80013b6:	d111      	bne.n	80013dc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013bc:	4b68      	ldr	r3, [pc, #416]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013be:	2104      	movs	r1, #4
 80013c0:	438a      	bics	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	22f8      	movs	r2, #248	; 0xf8
 80013ca:	4393      	bics	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	00da      	lsls	r2, r3, #3
 80013d4:	4b62      	ldr	r3, [pc, #392]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
 80013da:	e01e      	b.n	800141a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e0:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013e2:	2104      	movs	r1, #4
 80013e4:	430a      	orrs	r2, r1
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013e8:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ec:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	438a      	bics	r2, r1
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fb4a 	bl	8000a8c <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013fe:	f7ff fb45 	bl	8000a8c <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0a2      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001414:	2202      	movs	r2, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d1f1      	bne.n	80013fe <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <HAL_RCC_OscConfig+0x4e8>
 8001422:	e097      	b.n	8001554 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	220c      	movs	r2, #12
 800142a:	4013      	ands	r3, r2
 800142c:	2b08      	cmp	r3, #8
 800142e:	d100      	bne.n	8001432 <HAL_RCC_OscConfig+0x4f6>
 8001430:	e06b      	b.n	800150a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d14c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001440:	494a      	ldr	r1, [pc, #296]	; (800156c <HAL_RCC_OscConfig+0x630>)
 8001442:	400a      	ands	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb21 	bl	8000a8c <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fb1c 	bl	8000a8c <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e079      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	049b      	lsls	r3, r3, #18
 800146a:	4013      	ands	r3, r2
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	220f      	movs	r2, #15
 8001474:	4393      	bics	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800147e:	430a      	orrs	r2, r1
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x634>)
 8001488:	4013      	ands	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	431a      	orrs	r2, r3
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	0449      	lsls	r1, r1, #17
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff faef 	bl	8000a8c <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff faea 	bl	8000a8c <HAL_GetTick>
 80014b8:	0002      	movs	r2, r0
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e047      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	049b      	lsls	r3, r3, #18
 80014ce:	4013      	ands	r3, r2
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x578>
 80014d2:	e03f      	b.n	8001554 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80014da:	4924      	ldr	r1, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x630>)
 80014dc:	400a      	ands	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fad4 	bl	8000a8c <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff facf 	bl	8000a8c <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e02c      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	049b      	lsls	r3, r3, #18
 8001504:	4013      	ands	r3, r2
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x5ae>
 8001508:	e024      	b.n	8001554 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e01f      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x624>)
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	025b      	lsls	r3, r3, #9
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	429a      	cmp	r2, r3
 8001530:	d10e      	bne.n	8001550 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	220f      	movs	r2, #15
 8001536:	401a      	ands	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	23f0      	movs	r3, #240	; 0xf0
 8001544:	039b      	lsls	r3, r3, #14
 8001546:	401a      	ands	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b008      	add	sp, #32
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	40021000 	.word	0x40021000
 8001564:	00001388 	.word	0x00001388
 8001568:	efffffff 	.word	0xefffffff
 800156c:	feffffff 	.word	0xfeffffff
 8001570:	ffc2ffff 	.word	0xffc2ffff

08001574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b3      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4013      	ands	r3, r2
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d911      	bls.n	80015ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4393      	bics	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e09a      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2202      	movs	r2, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2204      	movs	r2, #4
 80015ca:	4013      	ands	r3, r2
 80015cc:	d006      	beq.n	80015dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80015d4:	21e0      	movs	r1, #224	; 0xe0
 80015d6:	00c9      	lsls	r1, r1, #3
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	22f0      	movs	r2, #240	; 0xf0
 80015e2:	4393      	bics	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d040      	beq.n	800167c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	4013      	ands	r3, r2
 800160c:	d114      	bne.n	8001638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e06e      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	049b      	lsls	r3, r3, #18
 8001622:	4013      	ands	r3, r2
 8001624:	d108      	bne.n	8001638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e062      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e05b      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fa1e 	bl	8000a8c <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001654:	e009      	b.n	800166a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f7ff fa19 	bl	8000a8c <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_RCC_ClockConfig+0x18c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e042      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	220c      	movs	r2, #12
 8001670:	401a      	ands	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1ec      	bne.n	8001656 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d211      	bcs.n	80016ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4393      	bics	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_RCC_ClockConfig+0x184>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e020      	b.n	80016f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2204      	movs	r2, #4
 80016b4:	4013      	ands	r3, r2
 80016b6:	d009      	beq.n	80016cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_RCC_ClockConfig+0x190>)
 80016be:	4013      	ands	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016cc:	f000 f820 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016d0:	0001      	movs	r1, r0
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x188>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	220f      	movs	r2, #15
 80016da:	4013      	ands	r3, r2
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_RCC_ClockConfig+0x194>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	000a      	movs	r2, r1
 80016e2:	40da      	lsrs	r2, r3
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x198>)
 80016e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff f989 	bl	8000a00 <HAL_InitTick>
  
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b004      	add	sp, #16
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40021000 	.word	0x40021000
 8001700:	00001388 	.word	0x00001388
 8001704:	fffff8ff 	.word	0xfffff8ff
 8001708:	08002460 	.word	0x08002460
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08f      	sub	sp, #60	; 0x3c
 8001714:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001716:	2314      	movs	r3, #20
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800171e:	c313      	stmia	r3!, {r0, r1, r4}
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800172a:	c313      	stmia	r3!, {r0, r1, r4}
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174c:	220c      	movs	r2, #12
 800174e:	4013      	ands	r3, r2
 8001750:	2b04      	cmp	r3, #4
 8001752:	d002      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x4a>
 8001754:	2b08      	cmp	r3, #8
 8001756:	d003      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x50>
 8001758:	e02d      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800175e:	e02d      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	0c9b      	lsrs	r3, r3, #18
 8001764:	220f      	movs	r2, #15
 8001766:	4013      	ands	r3, r2
 8001768:	2214      	movs	r2, #20
 800176a:	18ba      	adds	r2, r7, r2
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	220f      	movs	r2, #15
 8001776:	4013      	ands	r3, r2
 8001778:	1d3a      	adds	r2, r7, #4
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800177e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	4013      	ands	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800178c:	f7fe fcbc 	bl	8000108 <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	4353      	muls	r3, r2
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
 800179a:	e009      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800179c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179e:	000a      	movs	r2, r1
 80017a0:	0152      	lsls	r2, r2, #5
 80017a2:	1a52      	subs	r2, r2, r1
 80017a4:	0193      	lsls	r3, r2, #6
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	185b      	adds	r3, r3, r1
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80017b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017b4:	e002      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b00f      	add	sp, #60	; 0x3c
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	08002440 	.word	0x08002440
 80017cc:	08002450 	.word	0x08002450
 80017d0:	40021000 	.word	0x40021000
 80017d4:	007a1200 	.word	0x007a1200

080017d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01e      	b.n	8001828 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	223d      	movs	r2, #61	; 0x3d
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223c      	movs	r2, #60	; 0x3c
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff f80d 	bl	8000820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	223d      	movs	r2, #61	; 0x3d
 800180a:	2102      	movs	r1, #2
 800180c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f000 fb33 	bl	8001e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	223d      	movs	r2, #61	; 0x3d
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2101      	movs	r1, #1
 8001844:	430a      	orrs	r2, r1
 8001846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2207      	movs	r2, #7
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b06      	cmp	r3, #6
 8001858:	d007      	beq.n	800186a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b004      	add	sp, #16
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e01e      	b.n	80018c4 <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223d      	movs	r2, #61	; 0x3d
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d107      	bne.n	80018a2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	223c      	movs	r2, #60	; 0x3c
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe ffe7 	bl	8000870 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	223d      	movs	r2, #61	; 0x3d
 80018a6:	2102      	movs	r1, #2
 80018a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	0019      	movs	r1, r3
 80018b4:	0010      	movs	r0, r2
 80018b6:	f000 fae5 	bl	8001e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	223d      	movs	r2, #61	; 0x3d
 80018be:	2101      	movs	r1, #1
 80018c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d011      	beq.n	8001900 <HAL_TIM_IC_Start_IT+0x34>
 80018dc:	d802      	bhi.n	80018e4 <HAL_TIM_IC_Start_IT+0x18>
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80018e2:	e028      	b.n	8001936 <HAL_TIM_IC_Start_IT+0x6a>
  switch (Channel)
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d014      	beq.n	8001912 <HAL_TIM_IC_Start_IT+0x46>
 80018e8:	2b0c      	cmp	r3, #12
 80018ea:	d01b      	beq.n	8001924 <HAL_TIM_IC_Start_IT+0x58>
      break;
 80018ec:	e023      	b.n	8001936 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2102      	movs	r1, #2
 80018fa:	430a      	orrs	r2, r1
 80018fc:	60da      	str	r2, [r3, #12]
      break;
 80018fe:	e01a      	b.n	8001936 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2104      	movs	r1, #4
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]
      break;
 8001910:	e011      	b.n	8001936 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2108      	movs	r1, #8
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]
      break;
 8001922:	e008      	b.n	8001936 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2110      	movs	r1, #16
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]
      break;
 8001934:	46c0      	nop			; (mov r8, r8)
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fcc0 	bl	80022c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2207      	movs	r2, #7
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d007      	beq.n	8001966 <HAL_TIM_IC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d124      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	2b02      	cmp	r3, #2
 8001992:	d11d      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2203      	movs	r2, #3
 800199a:	4252      	negs	r2, r2
 800199c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2203      	movs	r2, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	d004      	beq.n	80019ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7fe feea 	bl	800078c <HAL_TIM_IC_CaptureCallback>
 80019b8:	e007      	b.n	80019ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 fa49 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fa4d 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2204      	movs	r2, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d125      	bne.n	8001a2a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2204      	movs	r2, #4
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d11e      	bne.n	8001a2a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2205      	movs	r2, #5
 80019f2:	4252      	negs	r2, r2
 80019f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d004      	beq.n	8001a14 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7fe febd 	bl	800078c <HAL_TIM_IC_CaptureCallback>
 8001a12:	e007      	b.n	8001a24 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fa1c 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fa20 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2208      	movs	r2, #8
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d124      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2208      	movs	r2, #8
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d11d      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2209      	movs	r2, #9
 8001a4c:	4252      	negs	r2, r2
 8001a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2204      	movs	r2, #4
 8001a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d004      	beq.n	8001a6c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fe91 	bl	800078c <HAL_TIM_IC_CaptureCallback>
 8001a6a:	e007      	b.n	8001a7c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f9f0 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 f9f4 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d125      	bne.n	8001adc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2210      	movs	r2, #16
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d11e      	bne.n	8001adc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2211      	movs	r2, #17
 8001aa4:	4252      	negs	r2, r2
 8001aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2208      	movs	r2, #8
 8001aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	23c0      	movs	r3, #192	; 0xc0
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7fe fe64 	bl	800078c <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e007      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 f9c3 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f9c7 	bl	8001e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10f      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d108      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4252      	negs	r2, r2
 8001b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7fe fe51 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b80      	cmp	r3, #128	; 0x80
 8001b16:	d10f      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b80      	cmp	r3, #128	; 0x80
 8001b24:	d108      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2281      	movs	r2, #129	; 0x81
 8001b2c:	4252      	negs	r2, r2
 8001b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fc44 	bl	80023c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d10f      	bne.n	8001b66 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b40      	cmp	r3, #64	; 0x40
 8001b52:	d108      	bne.n	8001b66 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2241      	movs	r2, #65	; 0x41
 8001b5a:	4252      	negs	r2, r2
 8001b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 f987 	bl	8001e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d10f      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d108      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2221      	movs	r2, #33	; 0x21
 8001b88:	4252      	negs	r2, r2
 8001b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 fc0e 	bl	80023b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	223c      	movs	r2, #60	; 0x3c
 8001bac:	5c9b      	ldrb	r3, [r3, r2]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e08a      	b.n	8001ccc <HAL_TIM_IC_ConfigChannel+0x130>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	223c      	movs	r2, #60	; 0x3c
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	223d      	movs	r2, #61	; 0x3d
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f000 f9be 	bl	8001f5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	210c      	movs	r1, #12
 8001bec:	438a      	bics	r2, r1
 8001bee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6999      	ldr	r1, [r3, #24]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	619a      	str	r2, [r3, #24]
 8001c02:	e05a      	b.n	8001cba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d11c      	bne.n	8001c44 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f000 fa1f 	bl	800205c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	492a      	ldr	r1, [pc, #168]	; (8001cd4 <HAL_TIM_IC_ConfigChannel+0x138>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6999      	ldr	r1, [r3, #24]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	021a      	lsls	r2, r3, #8
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	e03a      	b.n	8001cba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11b      	bne.n	8001c82 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f000 fa73 	bl	8002144 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	210c      	movs	r1, #12
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69d9      	ldr	r1, [r3, #28]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	61da      	str	r2, [r3, #28]
 8001c80:	e01b      	b.n	8001cba <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f000 fa97 	bl	80021c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69da      	ldr	r2, [r3, #28]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <HAL_TIM_IC_ConfigChannel+0x138>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69d9      	ldr	r1, [r3, #28]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	021a      	lsls	r2, r3, #8
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	223d      	movs	r2, #61	; 0x3d
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	223c      	movs	r2, #60	; 0x3c
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b004      	add	sp, #16
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	fffff3ff 	.word	0xfffff3ff

08001cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	223c      	movs	r2, #60	; 0x3c
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_TIM_ConfigClockSource+0x18>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e0ab      	b.n	8001e48 <HAL_TIM_ConfigClockSource+0x170>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	223c      	movs	r2, #60	; 0x3c
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	223d      	movs	r2, #61	; 0x3d
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2277      	movs	r2, #119	; 0x77
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <HAL_TIM_ConfigClockSource+0x178>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d100      	bne.n	8001d2a <HAL_TIM_ConfigClockSource+0x52>
 8001d28:	e06b      	b.n	8001e02 <HAL_TIM_ConfigClockSource+0x12a>
 8001d2a:	d80e      	bhi.n	8001d4a <HAL_TIM_ConfigClockSource+0x72>
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d100      	bne.n	8001d32 <HAL_TIM_ConfigClockSource+0x5a>
 8001d30:	e077      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x14a>
 8001d32:	d803      	bhi.n	8001d3c <HAL_TIM_ConfigClockSource+0x64>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d100      	bne.n	8001d3a <HAL_TIM_ConfigClockSource+0x62>
 8001d38:	e073      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d3a:	e07c      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d100      	bne.n	8001d42 <HAL_TIM_ConfigClockSource+0x6a>
 8001d40:	e06f      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x14a>
 8001d42:	2b30      	cmp	r3, #48	; 0x30
 8001d44:	d100      	bne.n	8001d48 <HAL_TIM_ConfigClockSource+0x70>
 8001d46:	e06c      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001d48:	e075      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d4a:	2b70      	cmp	r3, #112	; 0x70
 8001d4c:	d00e      	beq.n	8001d6c <HAL_TIM_ConfigClockSource+0x94>
 8001d4e:	d804      	bhi.n	8001d5a <HAL_TIM_ConfigClockSource+0x82>
 8001d50:	2b50      	cmp	r3, #80	; 0x50
 8001d52:	d036      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0xea>
 8001d54:	2b60      	cmp	r3, #96	; 0x60
 8001d56:	d044      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001d58:	e06d      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	0152      	lsls	r2, r2, #5
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d068      	beq.n	8001e34 <HAL_TIM_ConfigClockSource+0x15c>
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	0192      	lsls	r2, r2, #6
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d017      	beq.n	8001d9a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001d6a:	e064      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f000 fa82 	bl	8002284 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2277      	movs	r2, #119	; 0x77
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	609a      	str	r2, [r3, #8]
      break;
 8001d98:	e04d      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f000 fa6b 	bl	8002284 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	01c9      	lsls	r1, r1, #7
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]
      break;
 8001dc0:	e039      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	f000 f916 	bl	8002000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2150      	movs	r1, #80	; 0x50
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fa38 	bl	8002250 <TIM_ITRx_SetConfig>
      break;
 8001de0:	e029      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	001a      	movs	r2, r3
 8001df0:	f000 f976 	bl	80020e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2160      	movs	r1, #96	; 0x60
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fa28 	bl	8002250 <TIM_ITRx_SetConfig>
      break;
 8001e00:	e019      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	001a      	movs	r2, r3
 8001e10:	f000 f8f6 	bl	8002000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 fa18 	bl	8002250 <TIM_ITRx_SetConfig>
      break;
 8001e20:	e009      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	f000 fa0f 	bl	8002250 <TIM_ITRx_SetConfig>
      break;
 8001e32:	e000      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001e34:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	223d      	movs	r2, #61	; 0x3d
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	223c      	movs	r2, #60	; 0x3c
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	ffff00ff 	.word	0xffff00ff

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <TIM_Base_SetConfig+0x20>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <TIM_Base_SetConfig+0xc4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d108      	bne.n	8001eb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2270      	movs	r2, #112	; 0x70
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00f      	beq.n	8001ede <TIM_Base_SetConfig+0x5a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <TIM_Base_SetConfig+0xc4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00b      	beq.n	8001ede <TIM_Base_SetConfig+0x5a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <TIM_Base_SetConfig+0xc8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <TIM_Base_SetConfig+0x5a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <TIM_Base_SetConfig+0xcc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d003      	beq.n	8001ede <TIM_Base_SetConfig+0x5a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <TIM_Base_SetConfig+0xd0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <TIM_Base_SetConfig+0xd4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <TIM_Base_SetConfig+0xaa>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <TIM_Base_SetConfig+0xcc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d003      	beq.n	8001f2e <TIM_Base_SetConfig+0xaa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <TIM_Base_SetConfig+0xd0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d103      	bne.n	8001f36 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	615a      	str	r2, [r3, #20]
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b004      	add	sp, #16
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40002000 	.word	0x40002000
 8001f50:	40014400 	.word	0x40014400
 8001f54:	40014800 	.word	0x40014800
 8001f58:	fffffcff 	.word	0xfffffcff

08001f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4393      	bics	r3, r2
 8001f72:	001a      	movs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <TIM_TI1_SetConfig+0x9c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_TI1_SetConfig+0x38>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <TIM_TI1_SetConfig+0xa0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <TIM_TI1_SetConfig+0x3c>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <TIM_TI1_SetConfig+0x3e>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e003      	b.n	8001fb8 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	22f0      	movs	r2, #240	; 0xf0
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	220a      	movs	r2, #10
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	220a      	movs	r2, #10
 8001fda:	4013      	ands	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	621a      	str	r2, [r3, #32]
}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40000400 	.word	0x40000400

08002000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	2201      	movs	r2, #1
 8002018:	4393      	bics	r3, r2
 800201a:	001a      	movs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	22f0      	movs	r2, #240	; 0xf0
 800202a:	4393      	bics	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	220a      	movs	r2, #10
 800203c:	4393      	bics	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	621a      	str	r2, [r3, #32]
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b006      	add	sp, #24
 800205a:	bd80      	pop	{r7, pc}

0800205c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	2210      	movs	r2, #16
 8002070:	4393      	bics	r3, r2
 8002072:	001a      	movs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <TIM_TI2_SetConfig+0x7c>)
 8002088:	4013      	ands	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	4a10      	ldr	r2, [pc, #64]	; (80020dc <TIM_TI2_SetConfig+0x80>)
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	22a0      	movs	r2, #160	; 0xa0
 80020b0:	4393      	bics	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	22a0      	movs	r2, #160	; 0xa0
 80020ba:	4013      	ands	r3, r2
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	621a      	str	r2, [r3, #32]
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b006      	add	sp, #24
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	fffffcff 	.word	0xfffffcff
 80020dc:	ffff0fff 	.word	0xffff0fff

080020e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	2210      	movs	r2, #16
 80020f2:	4393      	bics	r3, r2
 80020f4:	001a      	movs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <TIM_TI2_ConfigInputStage+0x60>)
 800210a:	4013      	ands	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	031b      	lsls	r3, r3, #12
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	22a0      	movs	r2, #160	; 0xa0
 800211c:	4393      	bics	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	621a      	str	r2, [r3, #32]
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b006      	add	sp, #24
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	ffff0fff 	.word	0xffff0fff

08002144 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <TIM_TI3_SetConfig+0x78>)
 8002158:	401a      	ands	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2203      	movs	r2, #3
 800216e:	4393      	bics	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	22f0      	movs	r2, #240	; 0xf0
 800217e:	4393      	bics	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	4013      	ands	r3, r2
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <TIM_TI3_SetConfig+0x7c>)
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	021a      	lsls	r2, r3, #8
 800219c:	23a0      	movs	r3, #160	; 0xa0
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	621a      	str	r2, [r3, #32]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b006      	add	sp, #24
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	fffffeff 	.word	0xfffffeff
 80021c0:	fffff5ff 	.word	0xfffff5ff

080021c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <TIM_TI4_SetConfig+0x7c>)
 80021d8:	401a      	ands	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <TIM_TI4_SetConfig+0x80>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <TIM_TI4_SetConfig+0x84>)
 8002200:	4013      	ands	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	031b      	lsls	r3, r3, #12
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	0c1b      	lsrs	r3, r3, #16
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <TIM_TI4_SetConfig+0x88>)
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	031a      	lsls	r2, r3, #12
 800221e:	23a0      	movs	r3, #160	; 0xa0
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	4013      	ands	r3, r2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	621a      	str	r2, [r3, #32]
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	ffffefff 	.word	0xffffefff
 8002244:	fffffcff 	.word	0xfffffcff
 8002248:	ffff0fff 	.word	0xffff0fff
 800224c:	ffff5fff 	.word	0xffff5fff

08002250 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2270      	movs	r2, #112	; 0x70
 8002264:	4393      	bics	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	2207      	movs	r2, #7
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	609a      	str	r2, [r3, #8]
}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <TIM_ETR_SetConfig+0x3c>)
 800229c:	4013      	ands	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	021a      	lsls	r2, r3, #8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b006      	add	sp, #24
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	ffff00ff 	.word	0xffff00ff

080022c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	221f      	movs	r2, #31
 80022d4:	4013      	ands	r3, r2
 80022d6:	2201      	movs	r2, #1
 80022d8:	409a      	lsls	r2, r3
 80022da:	0013      	movs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	43d2      	mvns	r2, r2
 80022e6:	401a      	ands	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	211f      	movs	r1, #31
 80022f4:	400b      	ands	r3, r1
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4099      	lsls	r1, r3
 80022fa:	000b      	movs	r3, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	621a      	str	r2, [r3, #32]
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b006      	add	sp, #24
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223c      	movs	r2, #60	; 0x3c
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002320:	2302      	movs	r3, #2
 8002322:	e03c      	b.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	223c      	movs	r2, #60	; 0x3c
 8002328:	2101      	movs	r1, #1
 800232a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223d      	movs	r2, #61	; 0x3d
 8002330:	2102      	movs	r1, #2
 8002332:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2270      	movs	r2, #112	; 0x70
 8002348:	4393      	bics	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10c      	bne.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	4393      	bics	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4313      	orrs	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	223d      	movs	r2, #61	; 0x3d
 8002390:	2101      	movs	r1, #1
 8002392:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223c      	movs	r2, #60	; 0x3c
 8002398:	2100      	movs	r1, #0
 800239a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400

080023b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <__libc_init_array>:
 80023d0:	b570      	push	{r4, r5, r6, lr}
 80023d2:	2600      	movs	r6, #0
 80023d4:	4d0c      	ldr	r5, [pc, #48]	; (8002408 <__libc_init_array+0x38>)
 80023d6:	4c0d      	ldr	r4, [pc, #52]	; (800240c <__libc_init_array+0x3c>)
 80023d8:	1b64      	subs	r4, r4, r5
 80023da:	10a4      	asrs	r4, r4, #2
 80023dc:	42a6      	cmp	r6, r4
 80023de:	d109      	bne.n	80023f4 <__libc_init_array+0x24>
 80023e0:	2600      	movs	r6, #0
 80023e2:	f000 f821 	bl	8002428 <_init>
 80023e6:	4d0a      	ldr	r5, [pc, #40]	; (8002410 <__libc_init_array+0x40>)
 80023e8:	4c0a      	ldr	r4, [pc, #40]	; (8002414 <__libc_init_array+0x44>)
 80023ea:	1b64      	subs	r4, r4, r5
 80023ec:	10a4      	asrs	r4, r4, #2
 80023ee:	42a6      	cmp	r6, r4
 80023f0:	d105      	bne.n	80023fe <__libc_init_array+0x2e>
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
 80023f4:	00b3      	lsls	r3, r6, #2
 80023f6:	58eb      	ldr	r3, [r5, r3]
 80023f8:	4798      	blx	r3
 80023fa:	3601      	adds	r6, #1
 80023fc:	e7ee      	b.n	80023dc <__libc_init_array+0xc>
 80023fe:	00b3      	lsls	r3, r6, #2
 8002400:	58eb      	ldr	r3, [r5, r3]
 8002402:	4798      	blx	r3
 8002404:	3601      	adds	r6, #1
 8002406:	e7f2      	b.n	80023ee <__libc_init_array+0x1e>
 8002408:	08002470 	.word	0x08002470
 800240c:	08002470 	.word	0x08002470
 8002410:	08002470 	.word	0x08002470
 8002414:	08002474 	.word	0x08002474

08002418 <memset>:
 8002418:	0003      	movs	r3, r0
 800241a:	1812      	adds	r2, r2, r0
 800241c:	4293      	cmp	r3, r2
 800241e:	d100      	bne.n	8002422 <memset+0xa>
 8002420:	4770      	bx	lr
 8002422:	7019      	strb	r1, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	e7f9      	b.n	800241c <memset+0x4>

08002428 <_init>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242e:	bc08      	pop	{r3}
 8002430:	469e      	mov	lr, r3
 8002432:	4770      	bx	lr

08002434 <_fini>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr
